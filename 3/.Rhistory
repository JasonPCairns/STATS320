}
RookReturnTime <- function(){
}
RookReturnTime <- function(){
starting_state <- c(8,8)
curr <- starting
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (time > 0 & curr != starting){
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
time <- time + 1
}
return(time)
}
RookReturnTime()
RookReturnTime <- function(){
starting_state <- c(8,8)
curr <- starting_state
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (time > 0 & curr != starting){
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
time <- time + 1
}
return(time)
}
RookReturnTime()
RookReturnTime <- function(){
starting_state <- c(8,8)
curr <- starting_state
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (time > 0 & curr != starting_state){
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
time <- time + 1
}
return(time)
}
RookReturnTime()
starting_state <- c(8,8)
curr <- starting_state
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (time > 0 && curr != starting_state){
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
time <- time + 1
}
time
time
RookReturnTime <- function(){
starting_state <- c(8,8)
curr <- starting_state
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (time > 0 && curr != starting_state){
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
time <- time + 1
}
return(time)
}
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime <- function(){
starting_state <- c(8,8)
curr <- starting_state
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
time <- time + 1
if (curr == starting_state){
return(time)
}
}
}
RookReturnTime()
RookReturnTime()
RookReturnTime()
starting_state <- c(8,8)
curr <- starting_state
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
row_column
curr
curr = c(8,8)
identical(starting_state,curr)
RookReturnTime <- function(){
starting_state <- c(8,8)
curr <- starting_state
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1)
curr[row_column] <- sample(state_choices,1)
time <- time + 1
if (identical(curr,starting_state)){
return(time)
}
}
}
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
RookReturnTime()
?cat
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("E(X): ", mean(times))
}
NRookReturnTimes()
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes(100)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes(1000)
NRookReturnTimes(1000)
NRookReturnTimes(1000)
NRookReturnTimes(1000)
NRookReturnTimes(1000)
NRookReturnTimes(10000)
set.seed(1234)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes()
set.seed(12345)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes()
set.seed(123)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes()
set.seed(1234)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes()
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes()
set.seed(1234)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (TRUE){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T):   ", mean(times), "\nVar(T): ", var(times), "\nsd(t):  ", sd(times))
}
NRookReturnTimes()
set.seed(1234)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (){
row_column <- sample(row_column_choice,1) # choose to move horizontally/vertically 50/50
curr[row_column] <- sample(state_choices,1) # uniformly choose square within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T): ", mean(times), "\nVar(T): ", var(times), "\nsd(t)", sd(times))
}
NRookReturnTimes()
set.seed(1234)
RookReturnTime <- function(){
starting_state <- c(8,8) # top right corner
curr <- starting_state  # current postion
state_choices <- 1:8
row_column_choice <- 1:2
time <- 0
while (){
row_column <- sample(row_column_choice,1) # uniformly move horizontally/vertically
curr[row_column] <- sample(state_choices,1) # uniformly move within row/column
time <- time + 1
if (identical(curr,starting_state)){ # test for return to start position
return(time)
}
}
}
NRookReturnTimes <- function(N = 10000){
times <- rep(NA,N)
for (i in 1:N){
times[i] <- RookReturnTime()
}
cat("Number of simulations: ",N, "\nE(T):   ", mean(times),
"\nVar(T): ", var(times), "\nsd(t):  ", sd(times))
}
NRookReturnTimes()
